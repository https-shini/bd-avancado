-- ============================================================
-- LIMPEZA DO AMBIENTE (ignora erros se objetos não existirem)
-- ============================================================
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE tbJokenpo CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE seq_jokenpo';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP VIEW vwEstatisticasJokenpo';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP VIEW vwHistoricoJokenpo';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP PROCEDURE jogarJokenpo';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/

-- ============================================================
-- TABELA PARA ARMAZENAR AS JOGADAS
-- ============================================================
CREATE TABLE tbJokenpo (
    idJogada NUMBER PRIMARY KEY,
    jogadaUsuario VARCHAR2(10) NOT NULL,
    jogadaPC VARCHAR2(10) NOT NULL,
    resultado VARCHAR2(20) NOT NULL,
    dataJogada DATE DEFAULT SYSDATE
);

-- ============================================================
-- SEQUENCE PARA AUTO-INCREMENTO DO ID
-- ============================================================
CREATE SEQUENCE seq_jokenpo START WITH 1 INCREMENT BY 1;

-- ============================================================
-- PROCEDURE: JOGAR JOKENPÔ
-- Requisito a) Recebe jogada do usuário e gera jogada do PC
-- Requisito b) Compara jogadas e define resultado
-- Requisito c) Salva na tabela
-- ============================================================
CREATE OR REPLACE PROCEDURE jogarJokenpo (
    p_jogadaUsuario IN VARCHAR2
) AS
    v_jogadaPC VARCHAR2(10);
    v_resultado VARCHAR2(20);
    v_numero NUMBER;
    v_idJogada NUMBER;
BEGIN
    -- Gera número aleatório entre 1 e 4 para escolher jogada do PC
    SELECT DBMS_RANDOM.VALUE(1, 4) INTO v_numero FROM DUAL;
    
    -- Define jogada do PC baseado no número aleatório
    IF v_numero <= 2 THEN
        v_jogadaPC := 'Pedra';
    ELSIF v_numero <= 3 THEN
        v_jogadaPC := 'Papel';
    ELSE
        v_jogadaPC := 'Tesoura';
    END IF;

    -- Compara jogadas e define o resultado
    IF p_jogadaUsuario = v_jogadaPC THEN
        v_resultado := 'Empate';
    ELSIF (p_jogadaUsuario = 'Pedra' AND v_jogadaPC = 'Tesoura') OR
          (p_jogadaUsuario = 'Papel' AND v_jogadaPC = 'Pedra') OR
          (p_jogadaUsuario = 'Tesoura' AND v_jogadaPC = 'Papel') THEN
        v_resultado := 'Vitória do Usuário';
    ELSE
        v_resultado := 'Vitória do PC';
    END IF;

    -- Obtém próximo valor da sequence para o ID
    SELECT seq_jokenpo.NEXTVAL INTO v_idJogada FROM DUAL;

    -- Insere jogada na tabela
    INSERT INTO tbJokenpo (idJogada, jogadaUsuario, jogadaPC, resultado)
    VALUES (v_idJogada, p_jogadaUsuario, v_jogadaPC, v_resultado);
    
    COMMIT;
    
    -- Exibe resultado no console
    DBMS_OUTPUT.PUT_LINE('Você jogou: ' || p_jogadaUsuario);
    DBMS_OUTPUT.PUT_LINE('PC jogou: ' || v_jogadaPC);
    DBMS_OUTPUT.PUT_LINE('Resultado: ' || v_resultado);
    DBMS_OUTPUT.PUT_LINE('------------------------');
END;
/

-- ============================================================
-- VIEW: ESTATÍSTICAS DO JOGO
-- Requisito c) Consulta com total de vitórias e empates
-- ============================================================
CREATE OR REPLACE VIEW vwEstatisticasJokenpo AS
SELECT
    COUNT(*) AS TotalJogadas,
    SUM(CASE WHEN resultado = 'Vitória do Usuário' THEN 1 ELSE 0 END) AS VitoriasUsuario,
    SUM(CASE WHEN resultado = 'Vitória do PC' THEN 1 ELSE 0 END) AS VitoriasPC,
    SUM(CASE WHEN resultado = 'Empate' THEN 1 ELSE 0 END) AS Empates
FROM tbJokenpo;

-- ============================================================
-- VIEW: HISTÓRICO DE JOGADAS
-- ============================================================
CREATE OR REPLACE VIEW vwHistoricoJokenpo AS
SELECT 
    idJogada,
    jogadaUsuario,
    jogadaPC,
    resultado,
    TO_CHAR(dataJogada, 'DD/MM/YYYY HH24:MI:SS') AS dataHora
FROM tbJokenpo
ORDER BY idJogada DESC;

-- ============================================================
-- TESTES: EXECUÇÃO DE 5 JOGADAS
-- ============================================================
BEGIN
    DBMS_OUTPUT.ENABLE(1000000);
    jogarJokenpo('Pedra');
    jogarJokenpo('Papel');
    jogarJokenpo('Tesoura');
    jogarJokenpo('Pedra');
    jogarJokenpo('Papel');
END;
/

-- ============================================================
-- CONSULTAS: VISUALIZAÇÃO DOS RESULTADOS
-- ============================================================
SELECT * FROM vwHistoricoJokenpo;

SELECT * FROM vwEstatisticasJokenpo;

SELECT 
    resultado,
    COUNT(*) AS total,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM tbJokenpo), 2) AS percentual
FROM tbJokenpo
GROUP BY resultado
ORDER BY total DESC;

-- ============================================================
-- LIMPEZA FINAL DO AMBIENTE
-- ============================================================
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE tbJokenpo CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE seq_jokenpo';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP VIEW vwEstatisticasJokenpo';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP VIEW vwHistoricoJokenpo';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP PROCEDURE jogarJokenpo';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/
